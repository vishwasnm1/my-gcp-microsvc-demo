name: "Terraform Workflow"

on:
  workflow_dispatch:
    inputs:
      working-directory:
        required: false
        type: string
        default: "./terraform"

      terraform-action:
        required: true
        type: choice
        options:
          - apply
          - destroy

env:
  BUCKET_TF_STATE: ${{ secrets.BUCKET_TF_STATE }}

defaults:
  run:
    shell: bash

jobs:
  terraform:
    permissions:
     contents: 'read'
     id-token: 'write'
     
    name: Terraform-Deploy
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ${{inputs.working-directory}}
          
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure GCP credentials
        uses: google-github-actions/auth@v2
        with: 
          service_account: ${{ secrets.SERVICE_ACCOUNT }}
          workload_identity_provider: ${{ secrets.WIP_NAME }}
          
      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v2'
        with:
          version: '>= 363.0.0'

      - name: 'Use gcloud CLI'
        run: |
          gcloud info

      - name: Debug step
        run: |
          echo github actor: ${{ github.actor }}
          echo github actor id: ${{ github.actor_id }}
          echo working-directory: ${{inputs.working-directory}}
          echo branch_name: ${{ github_ref_name }}
          echo terraform action: ${{ inputs.terraform-action }}
          
      - uses: hashicorp/setup-terraform@v3
        name: Terraform setup
        
      - uses: actions/cache@v4
        name: Cache plugin dir
        with:
          path: ~/.tflint.d/plugins
          key: ubuntu-latest-tflint-${{ hashFiles('.tflint.hcl') }}

      - uses: terraform-linters/setup-tflint@v4
        name: Setup TFLint
        with:
          tflint_version: latest

      - name: Init TFLint
        run: tflint --init
  
      - name: Run TFLint
        run: tflint -f compact
        
      - name: Terraform init
        id: init
        run: terraform init -backend-config="bucket=$BUCKET_TF_STATE"

      - name: Terraform format
        id: fmt
        run: terraform fmt -check
      
      - name: Terraform validate
        id: validate
        run: terraform validate
     
      - name: Terraform plan
        id: plan
        run: |
          export TF_VAR_project_id=${{ secrets.GCP_PROJECT_ID }}
          terraform plan -no-color -input=false
        continue-on-error: true
           
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1
  
      - name: Terraform Apply
        if: inputs.terraform-action == 'apply'
        id: apply
        run: |
          export TF_VAR_project_id=${{ secrets.GCP_PROJECT_ID }}
          terraform apply -auto-approve -input=false
  
      - name: Terraform Destroy
        if: inputs.terraform-action == 'destroy'
        id: destroy
        run: terraform destroy -auto-approve -input=false
            
